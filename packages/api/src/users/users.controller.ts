import { SetSystemPermission } from "@api/authorization/set-system-permission.decorator"
import { ResponseWithCount } from "@api/common"
import type { CrudRequest } from "@api/common/decorators/crud-request.decorator"
import { GetCrudRequest } from "@api/common/decorators/crud-request.decorator"
import { DtoBody } from "@api/common/decorators/dto-body.decorator"
import { SetCollection } from "@api/common/decorators/set-collection.decorator"
import { wrap } from "@api/common/wrap"
import { CrudService } from "@api/crud/crud.service"
import { Controller, Delete, Get, Post, Put } from "@nestjs/common"
import {
	Data,
	endpoints,
	User,
	UserCollection,
	UserCreateDto,
	UserUpdateDto,
} from "@zmaj-js/common"
import { PartialDeep } from "type-fest"
import { UsersService } from "./users.service"

const ep = endpoints.users

@SetCollection(UserCollection)
@Controller(ep.$base)
export class UsersController {
	constructor(
		private readonly crud: CrudService<User>, //
		private readonly usersService: UsersService,
	) {}

	/**
	 * Find by ID
	 *
	 * @param req Request
	 * @returns Found user
	 */
	@SetSystemPermission("users", "read")
	@Get(ep.findById)
	async findById(@GetCrudRequest() req: CrudRequest): Promise<Data<PartialDeep<User>>> {
		return wrap(this.crud.findById(req))
	}

	/**
	 * Find many
	 *
	 * @param req Request
	 * @returns Found users
	 */
	@SetSystemPermission("users", "read")
	@Get(ep.findMany)
	async findMany(@GetCrudRequest() req: CrudRequest): Promise<ResponseWithCount<User>> {
		return this.crud.findMany(req)
	}

	/**
	 * Create user manually (don't use this endpoint to sign up user)
	 * Password will be autogenerated. User can then go and reset password
	 *
	 * @param req Request
	 * @param body User to be created
	 * @returns Created user
	 */
	@SetSystemPermission("users", "create")
	@Post(ep.create)
	async createOne(
		@GetCrudRequest() req: CrudRequest,
		@DtoBody(UserCreateDto) body: UserCreateDto,
	): Promise<Data<Partial<User>>> {
		// this calls crud under the hood. We need to encrypt password
		const user = await this.crud.createOne(req, {
			collection: UserCollection,
			dto: body,
			factory: async (params) => this.usersService.createUserFactory(params),
		})
		return wrap(user)
		// const user = await this.usersService.createUser({ data: body })
		// return wrap(user)
		// return wrap(this.crud.createOne(req, { dto: body, factory: UserSchema }))
	}

	/**
	 * Update user
	 *
	 * Don't use this endpoint to update currently logged in user
	 *
	 * @param req Request
	 * @param changes Data to update
	 * @returns Updated user
	 */
	@SetSystemPermission("users", "update")
	@Put(ep.updateById)
	async updateById(
		@GetCrudRequest() req: CrudRequest,
		@DtoBody(UserUpdateDto) changes: UserUpdateDto,
	): Promise<Data<Partial<User>>> {
		return wrap(this.crud.updateById(req, { changes }))
	}

	/**
	 * Delete user
	 *
	 * @param req Request
	 * @returns Deleted User
	 */
	@SetSystemPermission("users", "delete")
	@Delete(ep.deleteById)
	async deleteById(@GetCrudRequest() req: CrudRequest): Promise<Data<Partial<User>>> {
		return wrap(this.crud.deleteById(req))
	}
}
